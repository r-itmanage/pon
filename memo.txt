<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>test</title>
    </head>
    <style id="start"></style>
    <body>
        <div class="start">
            <div class="content">
                <h1>title</h1>
                <p id="start_content"></p>
                <hr />
                <a onclick="get_data();">データを読み込む</a>
            </div>
        </div>
        <main>
            <h1>title</h1>
            <p id="content"></p>
        </main>
    </body>
</html>

@import url('https://fonts.googleapis.com/css2?family=Zen+Kaku+Gothic+Antique:wght@500&display=swap');
html {
    font-family: "Zen Kaku Gothic Antique", "游ゴシック体", YuGothic, "游ゴシック Medium", "Yu Gothic Medium", "游ゴシック", "Yu Gothic", Arial, sans-serif;
    font-weight: 300;
    font-style: normal;
    margin:0;
    padding:0;
    width:100vw;
    height:100vh;
}
.start {
    position: fixed;
    z-index: 999;
    top: 0;
    left: 0;
    background-color: rgba(50, 50, 50, 0.8);
    width: 100%;
    height: 100%;
    box-sizing: border-box;
}
.start a {
	display: block;
	text-align: center;
	text-decoration: none;
	width: 130px;
	margin: auto;
	padding: 1rem 4rem;
	font-weight: bold;
	color: #27acd9;
	border-bottom: 2px solid #27acd9;
	border-radius: 100vh;
	box-shadow: 0 2px 7px rgba(0, 0, 0, 0.3);
	-webkit-box-shadow: 0 2px 7px rgba(0, 0, 0, 0.3);
	transition: 0.5s;
    background-color: #fff;
}
.start a:hover {
	color: #fff;
	background: #27acd9;
	border-bottom: 2px solid #fff;
	transform: translateY(3px);
}
.start h1 {
    color: #fff;
    text-align: center;
    margin: 0;
}
.start hr {
    border: none;
    border-top: 2px dashed #fff;
    margin: 3%;
    text-align: center;
}
.content {
    width: 100%;
    position: absolute;
    top: 50%;
    transform: translate(0, -50%);
}
#start_content {
    text-align: center;
    color: #fff;
}

function get_data() {
  fetch('https://r-itmanage.github.io/pon/test.txt')
    .then((response) => prepare(response))
    .catch((error) => document.getElementById('start_content').textContent = `データの取得中にエラーが発生しました（${error}）`);
}

function prepare(response) {
  document.getElementById('start').textContent = '.start{display:none}';
  response.text().then((text) => {
    var text = JSON.parse(text);
    document.getElementById('content').textContent = text;
  }).catch((error) => document.getElementById('content').textContent = `データの読み込み中にエラーが発生しました（${error}）`);
}
